#! /usr/bin/env Rscript

# TODO this should be
# add-highlight [keywords|specialFunctions|buildInConstratins|k|s|b] ... [-D]

# Find the list of keywords used by Rstudio and add new items
#
# Note: this doesn't control for duplicates


DEFAULTS <- list(
  specialFunctions = c(
    # base
    ".libPaths",
    ".onAttach",
    ".onDetach",
    ".onLoad",
    ".onUnload",
    "all",
    "any",
    "assign",
    "attachNamespace",
    "attr",
    "attributes",
    "browser",
    "c",
    "class",
    "commandArgs",
    "loadNamespace",
    "match.args",
    "message",
    "missing",
    "options",
    "print",
    "quit",
    "q",
    "requireNamespace",
    "stopifnot",
    "structure",
    "substitute",
    "typeof",
    "unloadNamespace",
    # utils
    "method",
    "View",
    # rlang
    "abort",
    "warn",
    # cnd
    "cnd",
    "condition",
    # scribe
    "command_args",
    # fuj
    "include",
    "struct",
    # mark
    "import",
    "match_params",
    # S7
    "method",
    "new_class",
    "new_generic",
    NULL
  ),
  builtInConstants = c(
    # S7
    "class_any",
    "class_array",
    "class_atomic",
    "class_call",
    "class_character",
    "class_complex",
    "class_construct",
    "class_construct_expr",
    "class_constructor",
    "class_data.frame",
    "class_Date",
    "class_deparse",
    "class_desc",
    "class_dispatch",
    "class_double",
    "class_environment",
    "class_expression",
    "class_factor",
    "class_flatten",
    "class_formula",
    "class_friendly",
    "class_function",
    "class_inherits",
    "class_integer",
    "class_language",
    "class_list",
    "class_logical",
    "class_matrix",
    "class_missing",
    "class_name",
    "class_numeric",
    "class_POSIXct",
    "class_POSIXlt",
    "class_POSIXt",
    "class_raw",
    "class_register",
    "class_type",
    "class_validate",
    "class_vector",
    NULL
  ),
  keywords = NULL
)

# TODO use scribe()
ca <- commandArgs(TRUE)
if (length(ca) == 0 || "--help" %in% tolower(ca) || "-h" %in% tolower(ca)) {
  cat(
    "add-keywords",
    "",
    "Modify RStudio keywords",
    "Potentially a dangerous operation",
    "",
    "USAGE",
    "  add-keywords [specialFunctions|builtInConstants|keywords|s|b|k] [...] [-D] [--help|-h]",
    "",
    "ARGUMENTS",
    "  type    specialFunctions, builtInConstraints, or keywords",
    "  ...     keywords to add (white space trimmed)",
    "  --help  Displays this message",
    "  -D      use defaults",
    "",
    "DEFAULTS",
    "  specialFunctions",
    toString(DEFAULTS$specialFunctions),
    "  builtInConstants",
    toString(DEFAULTS$builtInConstants),
    "  keywords",
    toString(DEFAULTS$keywords %||% "<none>"),
    "",
    sep = "\n"
  )
  quit("no")
}

type <- match.arg(
  tolower(trimws(ca)[1L]),
  tolower(c(
    "specialFunctions",
    "s",
    "sf",
    "functions",
    "builtInConstants",
    "b",
    "bic",
    "constants",
    "keywords",
    "k"
  ))
)

type <- switch(
  type,
  s = ,
  sf = ,
  functions = ,
  specialfunctions = "specialFunctions",
  b = ,
  bic = ,
  constants = ,
  builtinconstants = "builtInConstants",
  k = ,
  keywords = "keywords",
  stop("something went wrong")
)

if (type != "specialFunctions") {
  stop("not yet configured for type ", type)
}

new <- trimws(ca)[-1L]
use_defaults <- "-D" %in% new
new <- setdiff(new, "-D")
ignore <- startsWith(new, "-")

if (any(ignore)) {
  cat("w Ignoring options: ", toString(new[ignore]), "\n")
}

new <- c(if (use_defaults) DEFAULTS[[type]], new[!ignore])

if (!length(new)) {
  stop("no keywords given, use -D for defaults")
}

# find
files <- list.files(
  switch(
    .Platform$OS.type,
    unix = "/lib/rstudio/resources/app/www/rstudio",
    windows = normalizePath(
      file.path(
        Sys.getenv("PROGRAMFILES"),
        "RStudio",
        "resources",
        "app",
        "www",
        "rstudio"
      ),
      winslash = "/"
    ),
    stop("only available for unix and windows")
  ),
  pattern = "\\.cache\\.js$",
  full.names = TRUE
)

ok <- vapply(
  files,
  function(file) {
    text <- paste0(readLines(file, warn = FALSE), collapse = "")
    find <- function(pat) grepl(pat, text, fixed = TRUE)
    find("mode/r_highlight_rules") &&
      # this should be good enough, right?
      find("return switch try tryCatch stop warning require library attach")
  },
  NA
)

if (!any(ok)) {
  stop("no files found")
}

js <- files[ok][1]
x <- readLines(js, warn = FALSE)

cat("i finding list\n")
pat <- 'f=m.arrayToMap("return'
m <- regexpr(pat, x, fixed = TRUE)
if (any(m > 0)) {
  cat("i inserting keyword indicators\n")
  regmatches(x, m) <- 'f=m.arrayToMap("__.keywords.__ __.keywords.__ return'
  all_new <- TRUE
} else {
  all_new <- FALSE
}

cat("i finding __.keywords.__\n")
pat <- "(?<=__.keywords.__).*(?=__.keywords.__)"
m <- regexpr(pat, x, perl = TRUE)

if (any(m > 0)) {
  if (!all_new) {
    old <- regmatches(x, m)
    cat("i old keyword(s) found:", toString(old), "\n")
    old <- scan(text = old, what = character())
    old <- trimws(old)
    if (all(new %in% old)) {
      stop("x No new keywords")
    }
    new <- unique(c(old, new))
  }
  cat("i adding ", toString(new), "\n")
  new <- paste0(" ", paste0(new, collapse = " "), " ")
  regmatches(x, m) <- new
  cat("i modifying ", js, "\n")
  writeLines(x, js)
}

cat("i Restart RStudio to see effects\n")
